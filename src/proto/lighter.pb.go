// Code generated by protoc-gen-go.
// source: lighter.proto
// DO NOT EDIT!

/*
Package LighterGRPC is a generated protocol buffer package.

It is generated from these files:
	lighter.proto

It has these top-level messages:
	ColorMessage
	StateMessage
	Confirmation
	InitMessage
*/
package LighterGRPC

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type ColorMessage struct {
	Onstate  bool   `protobuf:"varint,1,opt,name=onstate" json:"onstate,omitempty"`
	R        int32  `protobuf:"varint,2,opt,name=r" json:"r,omitempty"`
	G        int32  `protobuf:"varint,3,opt,name=g" json:"g,omitempty"`
	B        int32  `protobuf:"varint,4,opt,name=b" json:"b,omitempty"`
	Opacity  int32  `protobuf:"varint,5,opt,name=opacity" json:"opacity,omitempty"`
	Sender   string `protobuf:"bytes,6,opt,name=sender" json:"sender,omitempty"`
	Password string `protobuf:"bytes,7,opt,name=password" json:"password,omitempty"`
}

func (m *ColorMessage) Reset()                    { *m = ColorMessage{} }
func (m *ColorMessage) String() string            { return proto.CompactTextString(m) }
func (*ColorMessage) ProtoMessage()               {}
func (*ColorMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StateMessage struct {
	Onstate  bool   `protobuf:"varint,1,opt,name=onstate" json:"onstate,omitempty"`
	Id       string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
}

func (m *StateMessage) Reset()                    { *m = StateMessage{} }
func (m *StateMessage) String() string            { return proto.CompactTextString(m) }
func (*StateMessage) ProtoMessage()               {}
func (*StateMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Confirmation struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *Confirmation) Reset()                    { *m = Confirmation{} }
func (m *Confirmation) String() string            { return proto.CompactTextString(m) }
func (*Confirmation) ProtoMessage()               {}
func (*Confirmation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type InitMessage struct {
	DeviceId string `protobuf:"bytes,1,opt,name=deviceId" json:"deviceId,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *InitMessage) Reset()                    { *m = InitMessage{} }
func (m *InitMessage) String() string            { return proto.CompactTextString(m) }
func (*InitMessage) ProtoMessage()               {}
func (*InitMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*ColorMessage)(nil), "LighterGRPC.ColorMessage")
	proto.RegisterType((*StateMessage)(nil), "LighterGRPC.StateMessage")
	proto.RegisterType((*Confirmation)(nil), "LighterGRPC.Confirmation")
	proto.RegisterType((*InitMessage)(nil), "LighterGRPC.InitMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion1

// Client API for Lighter service

type LighterClient interface {
	SetColor(ctx context.Context, in *ColorMessage, opts ...grpc.CallOption) (*Confirmation, error)
	CheckConnection(ctx context.Context, in *InitMessage, opts ...grpc.CallOption) (*ColorMessage, error)
	SwitchState(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*Confirmation, error)
}

type lighterClient struct {
	cc *grpc.ClientConn
}

func NewLighterClient(cc *grpc.ClientConn) LighterClient {
	return &lighterClient{cc}
}

func (c *lighterClient) SetColor(ctx context.Context, in *ColorMessage, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/LighterGRPC.Lighter/setColor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterClient) CheckConnection(ctx context.Context, in *InitMessage, opts ...grpc.CallOption) (*ColorMessage, error) {
	out := new(ColorMessage)
	err := grpc.Invoke(ctx, "/LighterGRPC.Lighter/checkConnection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lighterClient) SwitchState(ctx context.Context, in *StateMessage, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := grpc.Invoke(ctx, "/LighterGRPC.Lighter/switchState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Lighter service

type LighterServer interface {
	SetColor(context.Context, *ColorMessage) (*Confirmation, error)
	CheckConnection(context.Context, *InitMessage) (*ColorMessage, error)
	SwitchState(context.Context, *StateMessage) (*Confirmation, error)
}

func RegisterLighterServer(s *grpc.Server, srv LighterServer) {
	s.RegisterService(&_Lighter_serviceDesc, srv)
}

func _Lighter_SetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ColorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LighterServer).SetColor(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Lighter_CheckConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(InitMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LighterServer).CheckConnection(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _Lighter_SwitchState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(StateMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(LighterServer).SwitchState(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Lighter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "LighterGRPC.Lighter",
	HandlerType: (*LighterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setColor",
			Handler:    _Lighter_SetColor_Handler,
		},
		{
			MethodName: "checkConnection",
			Handler:    _Lighter_CheckConnection_Handler,
		},
		{
			MethodName: "switchState",
			Handler:    _Lighter_SwitchState_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 331 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x92, 0x4f, 0x4e, 0xf3, 0x30,
	0x10, 0xc5, 0x3f, 0xb7, 0x5f, 0xff, 0x4d, 0x0b, 0x48, 0x46, 0x02, 0xd3, 0x15, 0xca, 0xaa, 0xab,
	0x2c, 0xe0, 0x06, 0xad, 0x10, 0x54, 0x02, 0xa9, 0x0a, 0x5c, 0x20, 0xb5, 0x87, 0xd4, 0x6a, 0xb1,
	0x2b, 0xdb, 0xa5, 0xe2, 0x36, 0x9c, 0x8c, 0xb3, 0xe0, 0x38, 0x09, 0x24, 0x95, 0x80, 0x9d, 0x7f,
	0x33, 0xd6, 0x7b, 0x6f, 0xc6, 0x86, 0xa3, 0x8d, 0xcc, 0x56, 0x0e, 0x4d, 0xbc, 0x35, 0xda, 0x69,
	0x3a, 0xbc, 0x2f, 0xf0, 0x36, 0x59, 0xcc, 0xa2, 0x77, 0x02, 0xa3, 0x99, 0xde, 0x68, 0xf3, 0x80,
	0xd6, 0xa6, 0x19, 0x52, 0x06, 0x3d, 0xad, 0xac, 0x4b, 0x1d, 0x32, 0x72, 0x49, 0x26, 0xfd, 0xa4,
	0x42, 0x3a, 0x02, 0x62, 0x58, 0xcb, 0xd7, 0x3a, 0x09, 0x31, 0x39, 0x65, 0xac, 0x5d, 0x50, 0x96,
	0xd3, 0x92, 0xfd, 0x2f, 0x68, 0x19, 0x34, 0xb6, 0x29, 0x97, 0xee, 0x8d, 0x75, 0x42, 0xad, 0x42,
	0x7a, 0x06, 0x5d, 0x8b, 0x4a, 0xa0, 0x61, 0x5d, 0xdf, 0x18, 0x24, 0x25, 0xd1, 0x31, 0xf4, 0xb7,
	0xa9, 0xb5, 0x7b, 0x6d, 0x04, 0xeb, 0x85, 0xce, 0x17, 0x47, 0x4f, 0x30, 0x7a, 0xcc, 0x03, 0xfc,
	0x9d, 0xf0, 0x18, 0x5a, 0x52, 0x84, 0x88, 0x83, 0xc4, 0x9f, 0x1a, 0xaa, 0xed, 0x03, 0xd5, 0x49,
	0x3e, 0xb7, 0x7a, 0x96, 0xe6, 0x25, 0x75, 0x52, 0xab, 0x5c, 0xd5, 0xee, 0x38, 0xf7, 0x1e, 0x95,
	0x6a, 0x89, 0xd1, 0x0d, 0x0c, 0xe7, 0x4a, 0xba, 0xca, 0xde, 0x8b, 0x0a, 0x7c, 0x95, 0x1c, 0xe7,
	0x22, 0xdc, 0xf4, 0xa2, 0x15, 0x37, 0x0c, 0x5b, 0x4d, 0xc3, 0xab, 0x0f, 0x02, 0xbd, 0x72, 0xf3,
	0x74, 0x0a, 0x7d, 0x8b, 0x2e, 0xec, 0x9d, 0x5e, 0xc4, 0xb5, 0xf7, 0x88, 0xeb, 0x6f, 0x31, 0x3e,
	0x6c, 0x7d, 0xc7, 0x8d, 0xfe, 0xd1, 0x3b, 0x38, 0xe1, 0x2b, 0xe4, 0x6b, 0x5f, 0x56, 0xc8, 0x8b,
	0x19, 0x1a, 0xf7, 0x6b, 0xa1, 0xc7, 0x3f, 0x9b, 0x78, 0x25, 0x3f, 0xa0, 0xdd, 0x4b, 0xc7, 0x57,
	0x61, 0xcd, 0x07, 0x81, 0xea, 0xab, 0xff, 0x35, 0xd0, 0xf4, 0x1c, 0x4e, 0x05, 0xc6, 0x99, 0xd9,
	0x29, 0xc9, 0xd7, 0x18, 0x97, 0x9f, 0x6e, 0x41, 0x96, 0xdd, 0xf0, 0xef, 0xae, 0x3f, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x82, 0xf7, 0x19, 0x77, 0x88, 0x02, 0x00, 0x00,
}
